---
title: "Molecular descriptors and Fingerprints"
---

```{python import libraries, echo=FALSE, message=FALSE, warning=FALSE}
# PATH TO CUSTOM MODULES
import sys

sys.path.append("../src")

# IMPORT CUSTOM MODULES
import utils.stats as st

# IMPORT LIBRARIES
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

```

# LOAD DATASET

```{python define paths, echo=FALSE, message=FALSE, warning=FALSE}
# DIRECTORIES
input_path = "../data/raw/"
output_path = "../data/processed/"
```

```{python}
# FILES
molecular_descriptors_file = "molecular_descriptors.csv"
maccs_fingerprints_file = "maccs_fingerprints.csv"
ecfp4_fingerprints_file = "ecfp4_fingerprints.csv"
kfp_fingerprints_file = "kfp_fingerprints.csv"
```



# EXPLORATORY DATA ANALYSIS

## DATA STRUCTURE

```{python}
# SHOW FIRST 5 ROWS
molecules.head(5)
```

```{python}
# DATASET DIMENSIONS
molecules.shape
```

```{python}
# DATASET VARIABLES TYPES
molecules.dtypes
```

```{python}
molecules.describe()
```

## CHECK FOR MISSING VALUES

```{python}
molecules.isnull().sum().sum()
```

## CHECK FOR DUPLICATES

```{python}
molecules.duplicated().sum()
```

## ANALYZE CATEGORICAL VARIABLES

```{python}
# SEPARATE CATEGORICAL VARIABLES
molecules_categorical = molecules.select_dtypes(include=["object"])
# SEPARATE NUMERICAL VARIABLES
molecules_numerical = molecules.select_dtypes(include=["int64", "float64"])
```

```{python}
len(molecules_categorical)
```

### STANDARD TYPE

```{python}
molecules_categorical["Standard Type"].unique()
```

### STANDARD RELATION

```{python}
molecules_categorical["Standard Relation"].unique()
```

### STANDARD UNITS

```{python}
molecules_categorical["Standard Units"].unique()
```

### TARGET CHEMBL ID

```{python}
molecules["Target ChEMBL ID"].unique()
```

## ANALYZE NUMERICAL VARIABLES


```{python}
```


## ANALYZE TARGET VARIABLE

```{python}

```

# DATA PREPROCESSING

## DATA NORMALIZATION



## REMOVE CORELATED VARIABLES

```{python}
# FILTER COLUMNS WITH PEARSON CORRELATION GREATER THAN 0.9
molecules_corr_filter = st.pearson_corr_filter(molecules_numerical, 0.8)
molecules_numerical.drop(molecules_corr_filter, axis=1, inplace=True)
```

```{python}
# VIF APROXIMATION

```

## REMOVE LOW VARIANCE VARIABLES

```{python}
# REMOVE VARIABLES WITH LOW VARIANCE
molecules_low_var_filter = st.low_variance_filter(molecules_numerical, 0.99)
molecules_numerical.drop(molecules_low_var_filter, axis=1, inplace=True)
```

# MAX-MIN TRANSFORMATION

```{python}
# MAX-MIN TRANSFORMATION
molecules_numerical = molecules_numerical.apply(
    lambda x: (x - x.min()) / (x.max() - x.min())
)
molecules_numerical.fillna(0, inplace=True)
```

## CALCULATE RESPONSE VARIABLE FROM IC50 VALUES

```{python}
## CALCULATE RESPONSE VARIABLE FROM IC50 VALUES
molecules_numerical["Response"] = molecules["Standard Value"].apply(
    lambda x: 1 if x < 1000 else 0
)
```

# SAVE PREPROCESSED DATASET

```{python}
# SAVE PREPROCESSED DATASET
molecules_numerical.to_csv(
    processed_data_path + molecules_file + "preprocessed.csv", index=False
)
```

