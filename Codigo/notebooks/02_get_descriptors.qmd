---
title: "Molecular descriptors and Fingerprints calculation"
---

```{python import libraries}
# PATH TO CUSTOM MODULES
import sys

sys.path.append("../src")

# IMPORT LIBRARIES
import pandas as pd
import numpy as np

# IMPORT CUSTOM MODULES
import utils.moleculesUtils as moleculesUtils
from utils.moleculesUtils import *

```

```{python paths}
# DIRECTORIES
input_path = "../data/raw/"
output_path = "../data/raw/"
# FILES
input_file = "CHEMBL4523954_raw.csv"
```

```{python load data}
# LOAD DATA
molecules = pd.read_csv(input_path + input_file)
```

## DATASET DESCRIPTION

A first descption of the dataset is obtained where the number of rows and columns is shown, as well as the names of the columns. Also, the data types of the columns will be shown:

The dataset has 

```{python dataset dimension}
print(
    "The dataset has "
    + str(molecules.shape[0])
    + " rows and "
    + str(molecules.shape[1])
    + " columns."
)
```

```{python dataset column names}
# DATASET COLUMN NAMES
print("The columns of the dataset are:")
print(molecules.columns)
```

```{python dataset data types}
# NUMBER OF COLUMNS PER DATA TYPE
print("The dataset has:")
print(molecules.dtypes.value_counts())
```

```{python unique values columns}
# COLUMNS THAT HAVE ALL UNIQUE VALUES
print("The columns that have all unique values are:")
print(molecules.columns[molecules.nunique() == molecules.shape[0]])
```

```{python}
# COLUMNS THAT HAVE THE SAME VALUE
print("The columns that have the same value are:")
print(molecules.columns[molecules.nunique() == 1])
```

## REMOVE DUPLICATES

```{python remove duplicates}
# REMOVE DUPLICATES
molecules = molecules.drop_duplicates(subset=["molecule_chembl_id"], ignore_index=True)
```

## REMOVE UNNECESSARY COLUMNS

```{python remove unnecessary columns, include=TRUE}
# REMOVE UNNECESSARY COLUMNS
molecules = molecules[["canonical_smiles", "standard_value"]]
```

## DEFINE ACTIVE AND INACTIVE MOLECULES

```{python standard value median, include=TRUE}
# CALCULATE STANDARD VALUE MEDIAN
standard_value_median = molecules["standard_value"].median()
```

```{python define active and inactive molecules}
# DEFINE ACTIVE AND INACTIVE MOLECULES
molecules["activity"] = np.where(
    molecules["standard_value"] < standard_value_median, 1, 0
)
# COUNT ACTIVE AND INACTIVE MOLECULES
print("The dataset has:")
print(str(molecules["activity"].value_counts()[1]) + " active molecules")
print(str(molecules["activity"].value_counts()[0]) + " inactive molecules")
```

# CALCULATE MOLECULAR DESCRIPTORS AND FINGERPRINTS

According to the literature, several moelcular descriptors and fingerprints have been used in the construction of models to predict the activity of molecules. The selection of these descriptors and fingerprints plays a key role in model performance. Sometimes, even more important than the model itself.

After literature review, the following molecular descriptors and fingerprints were selected to be computed and therefore used in the models construction:

- General and topological molecular descriptors (RDKit)
- MACCS keys (MACCS)
- Extended connectivity fingerprints (ECFP)

## MOLECULAR DESCRIPTORS

```{python calculate molecular descriptors}
# CALCULATE MOLECULAR DESCRIPTORS
molecular_descriptors = moleculesUtils.calculate_molecule_set(
    smiles_set=molecules,
    smiles_column="canonical_smiles",
    function=calculate_molecular_descriptors,
)
```

## FINGERPRINTS

```{python calculate MACCS keys}
# CALCULATE MACC KEYS
macc_keys = moleculesUtils.calculate_molecule_set(
    smiles_set=molecules,
    smiles_column="canonical_smiles",
    function=calculate_maccs_keys,
)
```

```{python calculate ECFP4 fingerprints}
# CALCULATE ECFP FINGERPRINTS
ecfp4_fingerprints = moleculesUtils.calculate_molecule_set(
    molecules, "canonical_smiles", calculate_ecfp4_fingerprints
)
```


# SAVE DATA

The data obtained from the calculation of molecular descriptors and fingerprints will be saved in a csv file called `chembl_data.csv`.

In total, there will be one dataframe for each type of molecular descriptor and fingerprint. Each of them will count with the SMILES string of the molecules and the corresponding standard value that represents the activity of the molecules. The SMILES can be seen as ID of the molecules and it will be removed in further analysis.

```{python remove smiles and standard value columns}
# REMOVE SMILES AND STANDARD VALUE COLUMNS FROM ALL DATAFRAMES
molecules = molecules.drop(["standard_value"], axis=1)
molecular_descriptors = molecular_descriptors.drop(
    ["canonical_smiles", "standard_value"], axis=1
)
macc_keys = macc_keys.drop(["canonical_smiles", "standard_value"], axis=1)
ecfp4_fingerprints = ecfp4_fingerprints.drop(
    ["canonical_smiles", "standard_value"], axis=1
)
```

```{python save data}
# SAVE CHEMBL DATA
molecules.to_csv(output_path + "smiles_activity.csv", index=False)
# SAVE MOLECULAR DESCRIPTORS
molecular_descriptors.to_csv(output_path + "molecular_descriptors.csv", index=False)
# SAVE MACCS KEYS
macc_keys.to_csv(output_path + "macc_keys.csv", index=False)
# SAVE ECFP FINGERPRINTS
ecfp4_fingerprints.to_csv(output_path + "ecfp4_fingerprints.csv", index=False)
```